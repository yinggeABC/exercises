1.不建议使用css指定canvas大小
2. canvas.width  canvas.height      canvas.getContext("2d")获取绘图的上下文环境
3. canvas中的绘图是基于状态的，先设定绘图的状态，然后绘制
4.API   context.lineWidth = 5    context.strokeStyle="red"  context.fillStyle="blue"   context.stroke()  context.fill()
4.context.arc(centerX,centerY, radius, startingAngle,endingAngle,anticlockwise = false)
centerX和centerY为圆心的位置，radius为圆n半径，startingAngle与endingAngle为起始点和终止点的弧度值;顺时针角度一次为0.5PI, PI, 1.5PI
5. closePath函数对于fill函数是没有用的，即使没有调用closePath，canvas还会将图形封闭，然后fill
6. 当需要给一个描边的封闭图形填充的时候，应该先填充颜色，再描边，否则描边的lineWidth宽度会被填充色占去一半
7. 后绘制的图形如果和前面绘制的图形位置重合，那么后绘制图形会遮挡先绘制的图形
8. context.rect(startX,startY,width,height)
    context.strokeRect(startX,startY,width,height) //绘制矩形边框
    context.fillRect(startX,startY,width,height) //填充矩形
9. context.lineCap  线条起始点和终点的形状
butt	默认。向线条的每个末端添加平直的边缘。
round	向线条的每个末端添加圆形线帽。
square	向线条的每个末端添加正方形线帽。
   context.lineJoin  线条交汇处形状   miter(default,尖角连接)    bevel斜接     round圆角效果

10.图形变换(基础）
位移 translate(x,y)   将原点移动到(x,y)
旋转 rotate(deg)  采用弧度
缩放 scale(sx,sy)     横向缩放sx倍，纵向缩放sy倍,同时对宽高/线条粗细/左上角左边进行缩放

canvas的图形变换是叠加的，可以在变换前context.save()保存当前状态，然后用context.restore(),让状态(尤其是原点位置）恢复到save的时候

11. 线性渐变
var grd=context.createLinearGradient(xstart,ystart,xend,yend) xstart/ystart表示渐变色开始的坐标
grd.addColorStop(0.0,"#fff") 将(xstart,ystart)和(xend,yend)之间的区域分成10分，0.0表示第一部份，同理0.1，0.2
grd.addColorStop(0.3,"#ccc")
grd.addColorStop(1.0,"#000")
context.fillStyle=grd;

12. 径向渐变
var grd = context.createRadialGradient(x0,y0,r0,x1,y1,r1)  (x0,y0)为第一个同心圆圆心，r0为第一个同心圆半径
grd.addColorStop(0.0,"#fff")
grd.addColorStop(0.2,"#ccc")
grd.addColorStop(1.0,"#000")
context.fillStyle = grd;
13.createPattern
var img = new Image()
img.src="../xx.jpg"
img.onload = function(){
var pat = createPattern(img,repeat-style)
context.fillStyle = pat;
...
}

repeat style: repeat-x, repeat-y, no-repeat, repeat(横纵向都重复）

createPattern(canvas,repeat-style)

createPattern(video, repeat-style) //不讲

13. context.arcTo(x1,y1,x2,y2,r)(比较复杂，不如贝塞尔曲线常用）
    context.quadraticCurveTo(x1,y1,x2,y2)  （x1,y1为起始点坐标，x2,y2为终止点坐标）

14. Canvas中设置文字
context.font="bold 40px Arial"

context.fillStyle="#58"
context.fillText("欢迎",40,100)

context.strokeStyle="#58"
context.strokeText("欢迎"，40，200)

context.fillText与context.strokeText的API 为  name(string,x,y,maxlen), string为写的字符串，x,y为字符串的起始位置，maxlen为字符串最大
能占据多少个像素，如果超过，则挤压字符串
15. context.font默认为"20px sans-serif",可以设置为：“
font-style(normal, italic)  font-variant(normal small-caps小写字母变成大写)  font-weight（normal400, bold700)  font-size font-family

16.context.textAlign (left right center)  定义水平对齐方式
   context.textBaseline  (top middle bottom)  定义垂直对齐方式
   context.measureText(string).width  测试文本的宽度（px)，和context.font的设置有关

17. 剪切区域
context.clip() 将clip之前定义的封闭路径作为当前的绘制环境

18. 清空画布
context.clearRect(0,0,canvas.width,canvas.height)  常用在动画中

19. canvas非零环绕原则，就是绘制的第一个图形顺时针，其余图形逆时针，这几个图形就是一个整体，而不是各自的个体

20. context.isPointInPath(x,y)判断（x,y）是否在当前规划的路径内

21. var x = event.clientX - canvas.getBoundingClientRect().left;
            var y = event.clientY - canvas.getBoundingClientRect().top;
   这两句是固定的用来得到鼠标在canvas中相对位置的，其中，getBoundingClientRect得到canvas相对于DOM文档的距离,是javascript提供的函数


22.context.shadowColor = "black"
    context.shadowOffsetX = 5;
    context.shadow.offsetY =5;
    context.shadow.blur = 10 //阴影半径

23. Canvas与IE 6,7,8的兼容性   用explorecanvas第三方库
https://code.google.com/p/explorecanvas是托管
<!--[if lt IE 9]><script src=".../explorecanvas"></script><![endif]-->
24. canvas图形库： canvasplus   Artisan JS      Rgraph    封装了常用的图形绘制方法
25. context.drawImage(img,dx,dy)   img是一个图像对象   dx,dy为绘制起始点
     context.drawImage(img,dx,dy,dwidth,dheight)   dwidth, dheight定义将图片绘制为宽dwidth，高dheight
     context.drawImage(img,sx,sy,swidth,sheight,dx,dy,dwidth,dheight)  将img中(sx,sy)（sx,sy是相对于img的），处swidth,sheight的图像剪下来绘制到(dx,dy)处
26. 凡是用图片地址显示图片的地方，都能用dataurl, 其中，dataurl = canvas.toDataUrl("image/png")
27. 当context.getImageData()得到的data小于目标画布时候，putImageData()不能充满整个画布
